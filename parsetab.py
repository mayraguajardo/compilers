
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'left+-left*/rightUMINUSADDITION AND ASSIGN BOOL DIVISION DO ELIF ELSE EQUALS EQ_LESS EQ_MORE EXP FALSE FINISH FLOATDEC FNUMBER FOR IF INTDEC INUMBER LESS L_KEY L_PAREN MORE MULTI NAME NOT_EQUALS OR PRINT R_KEY R_PAREN STRING STRINGVAL SUBTRACTION TRUE WHILEstatement : INTDEC NAME is_assing\n    is_assing : "=" expression \n                | statement : FLOATDEC NAMEstatement : PRINT \'(\' expression \')\' statement : NAME "=" expressionstatement : expressionexpression : expression \'+\' expression\n                  | expression \'-\' expression\n                  | expression \'*\' expression\n                  | expression \'/\' expressionexpression : \'-\' expression %prec UMINUSexpression : \'(\' expression \')\'expression : INUMBERexpression : FNUMBERexpression : NAME'
    
_lr_action_items = {'INTDEC':([0,],[2,]),'FLOATDEC':([0,],[4,]),'PRINT':([0,],[5,]),'NAME':([0,2,4,6,8,12,14,17,18,19,20,23,],[3,11,13,16,16,16,16,16,16,16,16,16,]),'-':([0,3,6,7,8,9,10,12,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,],[8,-16,8,18,8,-14,-15,8,8,18,-16,8,8,8,8,-12,8,18,18,-13,-8,-9,-10,-11,18,]),'(':([0,5,6,8,12,14,17,18,19,20,23,],[6,14,6,6,6,6,6,6,6,6,6,]),'INUMBER':([0,6,8,12,14,17,18,19,20,23,],[9,9,9,9,9,9,9,9,9,9,]),'FNUMBER':([0,6,8,12,14,17,18,19,20,23,],[10,10,10,10,10,10,10,10,10,10,]),'$end':([1,3,7,9,10,11,13,16,21,22,24,26,27,28,29,30,31,32,],[0,-16,-7,-14,-15,-3,-4,-16,-12,-1,-6,-13,-8,-9,-10,-11,-2,-5,]),'=':([3,11,],[12,23,]),'+':([3,7,9,10,15,16,21,24,25,26,27,28,29,30,31,],[-16,17,-14,-15,17,-16,-12,17,17,-13,-8,-9,-10,-11,17,]),'*':([3,7,9,10,15,16,21,24,25,26,27,28,29,30,31,],[-16,19,-14,-15,19,-16,-12,19,19,-13,19,19,-10,-11,19,]),'/':([3,7,9,10,15,16,21,24,25,26,27,28,29,30,31,],[-16,20,-14,-15,20,-16,-12,20,20,-13,20,20,-10,-11,20,]),')':([9,10,15,16,21,25,26,27,28,29,30,],[-14,-15,26,-16,-12,32,-13,-8,-9,-10,-11,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,],[1,]),'expression':([0,6,8,12,14,17,18,19,20,23,],[7,15,21,24,25,27,28,29,30,31,]),'is_assing':([11,],[22,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> INTDEC NAME is_assing','statement',3,'p_statement_declare_int','calc.py',101),
  ('is_assing -> = expression','is_assing',2,'p_is_assing','calc.py',109),
  ('is_assing -> <empty>','is_assing',0,'p_is_assing','calc.py',110),
  ('statement -> FLOATDEC NAME','statement',2,'p_statement_declare_float','calc.py',116),
  ('statement -> PRINT ( expression )','statement',4,'p_statement_print','calc.py',120),
  ('statement -> NAME = expression','statement',3,'p_statement_assign','calc.py',124),
  ('statement -> expression','statement',1,'p_statement_expr','calc.py',131),
  ('expression -> expression + expression','expression',3,'p_expression_binop','calc.py',135),
  ('expression -> expression - expression','expression',3,'p_expression_binop','calc.py',136),
  ('expression -> expression * expression','expression',3,'p_expression_binop','calc.py',137),
  ('expression -> expression / expression','expression',3,'p_expression_binop','calc.py',138),
  ('expression -> - expression','expression',2,'p_expression_uminus','calc.py',145),
  ('expression -> ( expression )','expression',3,'p_expression_group','calc.py',149),
  ('expression -> INUMBER','expression',1,'p_expression_inumber','calc.py',153),
  ('expression -> FNUMBER','expression',1,'p_expression_fnumber','calc.py',157),
  ('expression -> NAME','expression',1,'p_expression_name','calc.py',161),
]
