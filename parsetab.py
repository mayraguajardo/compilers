
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftANDORnonassocEQUALSNOT_EQUALSEQ_MOREEQ_LESSMORELESSleftADDITIONSUBTRACTIONleftMULTIDIVISIONleftEXPrightUMINUSADDITION AND ASSIGN BOOL DIVISION DO ELIF ELSE EQUALS EQ_LESS EQ_MORE EXP FALSE FINISH FLOATDEC FNUMBER FOR IF INTDEC INUMBER LESS L_KEY L_PAREN MORE MULTI NAME NOT_EQUALS OR PRINT R_KEY R_PAREN STRING STRING_VAL SUBTRACTION TRUE WHILEstart : statementstatement : statement_print FINISH statement\n                | statement_register FINISH statement\n                | statement_condition statement\n                | statement_for statement\n                | statement_while statement\n                | emptyexpression : NAMEexpression : expression AND expression\n                | expression OR expression\n                | expression ADDITION expression\n                | expression SUBTRACTION expression\n                | expression MULTI expression\n                | expression DIVISION expression\n                | expression EXP expression\n                | expression EQUALS expression\n                | expression NOT_EQUALS expression\n                | expression EQ_MORE expression\n                | expression EQ_LESS expression\n                | expression MORE expression\n                | expression LESS expressionexpression : FNUMBER\n                 | INUMBER\n                 | STRING_VAL\n                 | bool_valbool_val : TRUE\n              | FALSEexpression : L_PAREN expression R_PARENexpression : SUBTRACTION expression %prec UMINUSstatement_print : PRINT expressionstatement_register : declare_register\n            | declare_assign_register\n            | assign_registerdeclare_register : type NAMEdeclare_assign_register : type NAME ASSIGN expressionassign_register : NAME ASSIGN expressionstatement_condition : if_condition elif_condition else_conditionif_condition : IF L_PAREN expression R_PAREN L_KEY statement R_KEYelif_condition : ELIF L_PAREN expression R_PAREN L_KEY statement R_KEY elif_condition\n                | emptyelse_condition : ELSE L_KEY statement R_KEY\n                | emptystatement_for : FOR L_PAREN declare_assign_register FINISH expression FINISH assign_register R_PAREN L_KEY statement R_KEYstatement_while : WHILE L_PAREN expression R_PAREN L_KEY statement R_KEY\n                 | DO L_KEY statement R_KEY WHILE L_PAREN expression R_PAREN FINISHempty :type : BOOL\n           | INTDEC\n           | FLOATDEC\n           | STRING'
    
_lr_action_items = {'PRINT':([0,5,6,7,13,24,25,39,41,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[9,9,9,9,-46,9,9,-46,-40,9,-37,-42,9,9,9,-41,9,-44,-38,-46,-39,9,-45,-43,]),'FOR':([0,5,6,7,13,24,25,39,41,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[14,14,14,14,-46,14,14,-46,-40,14,-37,-42,14,14,14,-41,14,-44,-38,-46,-39,14,-45,-43,]),'WHILE':([0,5,6,7,13,24,25,39,41,44,65,67,90,95,101,103,104,105,112,114,115,118,119,120,122,],[15,15,15,15,-46,15,15,-46,-40,15,-37,-42,15,102,15,15,-41,15,-44,-38,-46,-39,15,-45,-43,]),'DO':([0,5,6,7,13,24,25,39,41,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[16,16,16,16,-46,16,16,-46,-40,16,-37,-42,16,16,16,-41,16,-44,-38,-46,-39,16,-45,-43,]),'$end':([0,1,2,5,6,7,8,13,24,25,26,27,28,39,41,48,49,65,67,104,112,114,115,118,120,122,],[-46,0,-1,-46,-46,-46,-7,-46,-46,-46,-4,-5,-6,-46,-40,-2,-3,-37,-42,-41,-44,-38,-46,-39,-45,-43,]),'NAME':([0,5,6,7,9,13,17,20,21,22,23,24,25,31,36,39,41,43,44,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,65,67,68,70,73,90,92,101,103,104,105,106,108,112,114,115,118,119,120,122,],[18,18,18,18,30,-46,45,-47,-48,-49,-50,18,18,30,30,-46,-40,30,18,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,-37,-42,30,93,30,18,30,18,18,-41,18,18,30,-44,-38,-46,-39,18,-45,-43,]),'IF':([0,5,6,7,13,24,25,39,41,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[19,19,19,19,-46,19,19,-46,-40,19,-37,-42,19,19,19,-41,19,-44,-38,-46,-39,19,-45,-43,]),'BOOL':([0,5,6,7,13,24,25,39,41,42,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[20,20,20,20,-46,20,20,-46,-40,20,20,-37,-42,20,20,20,-41,20,-44,-38,-46,-39,20,-45,-43,]),'INTDEC':([0,5,6,7,13,24,25,39,41,42,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[21,21,21,21,-46,21,21,-46,-40,21,21,-37,-42,21,21,21,-41,21,-44,-38,-46,-39,21,-45,-43,]),'FLOATDEC':([0,5,6,7,13,24,25,39,41,42,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[22,22,22,22,-46,22,22,-46,-40,22,22,-37,-42,22,22,22,-41,22,-44,-38,-46,-39,22,-45,-43,]),'STRING':([0,5,6,7,13,24,25,39,41,42,44,65,67,90,101,103,104,105,112,114,115,118,119,120,122,],[23,23,23,23,-46,23,23,-46,-40,23,23,-37,-42,23,23,23,-41,23,-44,-38,-46,-39,23,-45,-43,]),'FINISH':([3,4,10,11,12,29,30,32,33,34,35,37,38,45,63,69,74,76,77,78,79,80,81,82,83,84,85,86,87,88,89,96,100,117,],[24,25,-31,-32,-33,-30,-8,-22,-23,-24,-25,-26,-27,-34,-29,92,-36,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-28,-35,106,120,]),'R_KEY':([5,6,7,8,13,24,25,26,27,28,39,41,44,48,49,65,67,72,90,98,101,103,104,105,107,109,110,112,114,115,118,119,120,121,122,],[-46,-46,-46,-7,-46,-46,-46,-4,-5,-6,-46,-40,-46,-2,-3,-37,-42,95,-46,104,-46,-46,-41,-46,112,114,115,-44,-38,-46,-39,-46,-45,122,-43,]),'FNUMBER':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'INUMBER':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'STRING_VAL':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'L_PAREN':([9,14,15,19,31,36,40,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,102,108,],[36,42,43,47,36,36,68,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,108,36,]),'SUBTRACTION':([9,29,30,31,32,33,34,35,36,37,38,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,68,71,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,92,96,100,108,113,],[31,53,-8,31,-22,-23,-24,-25,31,-26,-27,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,-29,53,31,53,31,53,53,53,53,-11,-12,-13,-14,-15,53,53,53,53,53,53,-28,53,31,53,53,31,53,]),'TRUE':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'FALSE':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'ELIF':([13,114,115,],[40,-38,40,]),'ELSE':([13,39,41,114,115,118,],[-46,66,-40,-38,-46,-39,]),'L_KEY':([16,66,94,97,99,116,],[44,90,101,103,105,119,]),'ASSIGN':([18,45,93,],[46,73,73,]),'AND':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[50,-8,-22,-23,-24,-25,-26,-27,-29,50,50,50,50,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-28,50,50,50,50,]),'OR':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[51,-8,-22,-23,-24,-25,-26,-27,-29,51,51,51,51,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-28,51,51,51,51,]),'ADDITION':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[52,-8,-22,-23,-24,-25,-26,-27,-29,52,52,52,52,52,52,-11,-12,-13,-14,-15,52,52,52,52,52,52,-28,52,52,52,52,]),'MULTI':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[54,-8,-22,-23,-24,-25,-26,-27,-29,54,54,54,54,54,54,54,54,-13,-14,-15,54,54,54,54,54,54,-28,54,54,54,54,]),'DIVISION':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[55,-8,-22,-23,-24,-25,-26,-27,-29,55,55,55,55,55,55,55,55,-13,-14,-15,55,55,55,55,55,55,-28,55,55,55,55,]),'EXP':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[56,-8,-22,-23,-24,-25,-26,-27,-29,56,56,56,56,56,56,56,56,56,56,-15,56,56,56,56,56,56,-28,56,56,56,56,]),'EQUALS':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[57,-8,-22,-23,-24,-25,-26,-27,-29,57,57,57,57,57,57,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,57,57,57,57,]),'NOT_EQUALS':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[58,-8,-22,-23,-24,-25,-26,-27,-29,58,58,58,58,58,58,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,58,58,58,58,]),'EQ_MORE':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[59,-8,-22,-23,-24,-25,-26,-27,-29,59,59,59,59,59,59,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,59,59,59,59,]),'EQ_LESS':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[60,-8,-22,-23,-24,-25,-26,-27,-29,60,60,60,60,60,60,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,60,60,60,60,]),'MORE':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[61,-8,-22,-23,-24,-25,-26,-27,-29,61,61,61,61,61,61,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,61,61,61,61,]),'LESS':([29,30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,96,100,113,],[62,-8,-22,-23,-24,-25,-26,-27,-29,62,62,62,62,62,62,-11,-12,-13,-14,-15,None,None,None,None,None,None,-28,62,62,62,62,]),'R_PAREN':([30,32,33,34,35,37,38,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,111,113,],[-8,-22,-23,-24,-25,-26,-27,-29,89,94,-36,97,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-28,99,116,117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'statement':([0,5,6,7,24,25,44,90,101,103,105,119,],[2,26,27,28,48,49,72,98,107,109,110,121,]),'statement_print':([0,5,6,7,24,25,44,90,101,103,105,119,],[3,3,3,3,3,3,3,3,3,3,3,3,]),'statement_register':([0,5,6,7,24,25,44,90,101,103,105,119,],[4,4,4,4,4,4,4,4,4,4,4,4,]),'statement_condition':([0,5,6,7,24,25,44,90,101,103,105,119,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'statement_for':([0,5,6,7,24,25,44,90,101,103,105,119,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'statement_while':([0,5,6,7,24,25,44,90,101,103,105,119,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'empty':([0,5,6,7,13,24,25,39,44,90,101,103,105,115,119,],[8,8,8,8,41,8,8,67,8,8,8,8,8,41,8,]),'declare_register':([0,5,6,7,24,25,44,90,101,103,105,119,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'declare_assign_register':([0,5,6,7,24,25,42,44,90,101,103,105,119,],[11,11,11,11,11,11,69,11,11,11,11,11,11,]),'assign_register':([0,5,6,7,24,25,44,90,101,103,105,106,119,],[12,12,12,12,12,12,12,12,12,12,12,111,12,]),'if_condition':([0,5,6,7,24,25,44,90,101,103,105,119,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'type':([0,5,6,7,24,25,42,44,90,101,103,105,119,],[17,17,17,17,17,17,70,17,17,17,17,17,17,]),'expression':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[29,63,64,71,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,96,100,113,]),'bool_val':([9,31,36,43,46,47,50,51,52,53,54,55,56,57,58,59,60,61,62,68,73,92,108,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'elif_condition':([13,115,],[39,118,]),'else_condition':([39,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> statement','start',1,'p_start','calc.py',106),
  ('statement -> statement_print FINISH statement','statement',3,'p_statement','calc.py',111),
  ('statement -> statement_register FINISH statement','statement',3,'p_statement','calc.py',112),
  ('statement -> statement_condition statement','statement',2,'p_statement','calc.py',113),
  ('statement -> statement_for statement','statement',2,'p_statement','calc.py',114),
  ('statement -> statement_while statement','statement',2,'p_statement','calc.py',115),
  ('statement -> empty','statement',1,'p_statement','calc.py',116),
  ('expression -> NAME','expression',1,'p_expression_NAME','calc.py',125),
  ('expression -> expression AND expression','expression',3,'p_expression_binop','calc.py',129),
  ('expression -> expression OR expression','expression',3,'p_expression_binop','calc.py',130),
  ('expression -> expression ADDITION expression','expression',3,'p_expression_binop','calc.py',131),
  ('expression -> expression SUBTRACTION expression','expression',3,'p_expression_binop','calc.py',132),
  ('expression -> expression MULTI expression','expression',3,'p_expression_binop','calc.py',133),
  ('expression -> expression DIVISION expression','expression',3,'p_expression_binop','calc.py',134),
  ('expression -> expression EXP expression','expression',3,'p_expression_binop','calc.py',135),
  ('expression -> expression EQUALS expression','expression',3,'p_expression_binop','calc.py',136),
  ('expression -> expression NOT_EQUALS expression','expression',3,'p_expression_binop','calc.py',137),
  ('expression -> expression EQ_MORE expression','expression',3,'p_expression_binop','calc.py',138),
  ('expression -> expression EQ_LESS expression','expression',3,'p_expression_binop','calc.py',139),
  ('expression -> expression MORE expression','expression',3,'p_expression_binop','calc.py',140),
  ('expression -> expression LESS expression','expression',3,'p_expression_binop','calc.py',141),
  ('expression -> FNUMBER','expression',1,'p_expression_valuesues','calc.py',146),
  ('expression -> INUMBER','expression',1,'p_expression_valuesues','calc.py',147),
  ('expression -> STRING_VAL','expression',1,'p_expression_valuesues','calc.py',148),
  ('expression -> bool_val','expression',1,'p_expression_valuesues','calc.py',149),
  ('bool_val -> TRUE','bool_val',1,'p_bool_val','calc.py',153),
  ('bool_val -> FALSE','bool_val',1,'p_bool_val','calc.py',154),
  ('expression -> L_PAREN expression R_PAREN','expression',3,'p_expression_parenthesis','calc.py',161),
  ('expression -> SUBTRACTION expression','expression',2,'p_expression_uminus','calc.py',165),
  ('statement_print -> PRINT expression','statement_print',2,'p_statement_print','calc.py',169),
  ('statement_register -> declare_register','statement_register',1,'p_statement_register','calc.py',173),
  ('statement_register -> declare_assign_register','statement_register',1,'p_statement_register','calc.py',174),
  ('statement_register -> assign_register','statement_register',1,'p_statement_register','calc.py',175),
  ('declare_register -> type NAME','declare_register',2,'p_declare_register','calc.py',179),
  ('declare_assign_register -> type NAME ASSIGN expression','declare_assign_register',4,'p_declare_assign_register','calc.py',183),
  ('assign_register -> NAME ASSIGN expression','assign_register',3,'p_assign_register','calc.py',187),
  ('statement_condition -> if_condition elif_condition else_condition','statement_condition',3,'p_statement_condition','calc.py',191),
  ('if_condition -> IF L_PAREN expression R_PAREN L_KEY statement R_KEY','if_condition',7,'p_if_condition','calc.py',195),
  ('elif_condition -> ELIF L_PAREN expression R_PAREN L_KEY statement R_KEY elif_condition','elif_condition',8,'p_elif_condition','calc.py',200),
  ('elif_condition -> empty','elif_condition',1,'p_elif_condition','calc.py',201),
  ('else_condition -> ELSE L_KEY statement R_KEY','else_condition',4,'p_else_condition','calc.py',208),
  ('else_condition -> empty','else_condition',1,'p_else_condition','calc.py',209),
  ('statement_for -> FOR L_PAREN declare_assign_register FINISH expression FINISH assign_register R_PAREN L_KEY statement R_KEY','statement_for',11,'p_statement_for','calc.py',214),
  ('statement_while -> WHILE L_PAREN expression R_PAREN L_KEY statement R_KEY','statement_while',7,'p_statement_while','calc.py',219),
  ('statement_while -> DO L_KEY statement R_KEY WHILE L_PAREN expression R_PAREN FINISH','statement_while',9,'p_statement_while','calc.py',220),
  ('empty -> <empty>','empty',0,'p_empty','calc.py',228),
  ('type -> BOOL','type',1,'p_type','calc.py',233),
  ('type -> INTDEC','type',1,'p_type','calc.py',234),
  ('type -> FLOATDEC','type',1,'p_type','calc.py',235),
  ('type -> STRING','type',1,'p_type','calc.py',236),
]
